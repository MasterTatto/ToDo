{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","liItem","tasks","map","t","type","checked","isDone","title","className","onClick","removeTask","id","useState","valueInput","setValueInput","onChange","e","currentTarget","value","onKeyPress","el","key","addTask","setButtonValue","App","filter","setFilter","console","log","v1","setTasks","f","tasksChange","v","newTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oQAiBO,SAASA,EAASC,GACxB,IAAMC,EAASD,EAAME,MAAMC,KAAI,SAACC,GAE/B,OACC,4BACC,2BAAOC,KAAK,WAAWC,QAASF,EAAEG,SAClC,8BAAOH,EAAEI,OACT,4BAAQC,UAAU,QAAQC,QALT,kBAAMV,EAAMW,WAAWP,EAAEQ,MAK1C,SAOH,EAAkCC,mBAAS,IAA3C,mBAAKC,EAAL,KAAiBC,EAAjB,KAqBA,OACC,6BACC,4BAAKf,EAAMQ,OACX,6BACC,2BACCQ,SARkB,SAACC,GACtBF,EAAcE,EAAEC,cAAcC,QAQ3BA,MAAOL,EACPM,WAtBa,SAACC,GACF,UAAXA,EAAGC,MACNtB,EAAMuB,QAAQT,GACdC,EAAc,MAoBZN,UAAU,UAEX,4BAAQA,UAAU,MAAMC,QAlBV,WAChBV,EAAMuB,QAAQT,GACdC,EAAc,MAgBZ,MAID,4BAAKd,GACL,6BACC,4BAAQQ,UAAU,WAAWC,QAnCpB,kBAAMV,EAAMwB,eAAe,SAmCpC,OAGA,4BAAQf,UAAU,WAAWC,QArCjB,kBAAMV,EAAMwB,eAAe,YAqCvC,UAGA,4BAAQf,UAAU,WAAWC,QAvCd,kBAAMV,EAAMwB,eAAe,eAuC1C,eCfWC,MAtDf,WACC,MAA0BZ,mBAAsB,OAAhD,mBAAKa,EAAL,KAAaC,EAAb,KAEAC,QAAQC,IAAIC,eAEZ,MAAwBjB,mBAAS,CAChC,CAAED,GAAIkB,cAAMtB,MAAO,WAAYD,QAAQ,GACvC,CAAEK,GAAIkB,cAAMtB,MAAO,KAAMD,QAAQ,GACjC,CAAEK,GAAIkB,cAAMtB,MAAO,UAAWD,QAAQ,GACtC,CAAEK,GAAIkB,cAAMtB,MAAO,QAASD,QAAQ,GACpC,CAAEK,GAAIkB,cAAMtB,MAAO,SAAUD,QAAQ,KALtC,mBAAKL,EAAL,KAAY6B,EAAZ,KAoCA,OACC,yBAAKtB,UAAU,OACd,kBAACV,EAAD,CACCS,MAAM,gBACNN,MA/Ba,cAAXwB,EACKxB,EAAQA,EAAMwB,QAAO,SAACM,GAAD,OAAoB,IAAbA,EAAEzB,UAExB,WAAXmB,EACKxB,EAAQA,EAAMwB,QAAO,SAACM,GAAD,OAAoB,IAAbA,EAAEzB,UAE/BL,EA0BNS,WAlBH,SAAoBC,GACnB,IAAIqB,EAAc/B,EAAMwB,QAAO,SAACM,GAC/B,OAAOA,EAAEpB,KAAOA,KAEjBmB,EAASE,IAePT,eAvBH,SAAwBH,GACvBM,EAAUN,IAuBRE,QAbH,SAAiBW,GAChB,IACIC,EAAQ,CADE,CAAEvB,GAAIkB,cAAMtB,MAAO0B,EAAG3B,QAAQ,IAChC,mBAAgBL,IAC5B6B,EAASI,QC/BSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.de443c4f.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport { ValueFilter } from './App';\r\n//\r\ntype TaskType = {\r\n\tid: string;\r\n\ttitle: string;\r\n\tisDone: boolean;\r\n};\r\n//\r\ntype PropsType = {\r\n\ttitle: string;\r\n\ttasks: Array<TaskType>;\r\n\tremoveTask: (id: string) => void;\r\n\tsetButtonValue: (el: ValueFilter) => void;\r\n\taddTask: (v: string) => void;\r\n};\r\n//\r\nexport function Todolist(props: PropsType) {\r\n\tconst liItem = props.tasks.map((t) => {\r\n\t\tconst removeTask = () => props.removeTask(t.id);\r\n\t\treturn (\r\n\t\t\t<li>\r\n\t\t\t\t<input type='checkbox' checked={t.isDone} />\r\n\t\t\t\t<span>{t.title}</span>\r\n\t\t\t\t<button className='btnLi' onClick={removeTask}>\r\n\t\t\t\t\tX\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t);\r\n\t});\r\n\t//\r\n\tlet [valueInput, setValueInput] = useState('');\r\n\t//\r\n\tconst all = () => props.setButtonValue('all');\r\n\tconst active = () => props.setButtonValue('active');\r\n\tconst completed = () => props.setButtonValue('completed');\r\n\t//\r\n\tconst keyPress = (el: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (el.key === 'Enter') {\r\n\t\t\tprops.addTask(valueInput);\r\n\t\t\tsetValueInput('');\r\n\t\t}\r\n\t};\r\n\t//\r\n\tconst btnPress = () => {\r\n\t\tprops.addTask(valueInput);\r\n\t\tsetValueInput('');\r\n\t};\r\n\t//\r\n\tconst onChangeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetValueInput(e.currentTarget.value);\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3>{props.title}</h3>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\tonChange={onChangeValue}\r\n\t\t\t\t\tvalue={valueInput}\r\n\t\t\t\t\tonKeyPress={keyPress}\r\n\t\t\t\t\tclassName='input'\r\n\t\t\t\t/>\r\n\t\t\t\t<button className='btn' onClick={btnPress}>\r\n\t\t\t\t\t+\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<ul>{liItem}</ul>\r\n\t\t\t<div>\r\n\t\t\t\t<button className='btnPanel' onClick={all}>\r\n\t\t\t\t\tAll\r\n\t\t\t\t</button>\r\n\t\t\t\t<button className='btnPanel' onClick={active}>\r\n\t\t\t\t\tActive\r\n\t\t\t\t</button>\r\n\t\t\t\t<button className='btnPanel' onClick={completed}>\r\n\t\t\t\t\tCompleted\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nexport type ValueFilter = 'all' | 'completed' | 'active';\r\nfunction App() {\r\n\tlet [filter, setFilter] = useState<ValueFilter>('all');\r\n\t//\r\n\tconsole.log(v1());\r\n\t//\r\n\tlet [tasks, setTasks] = useState([\r\n\t\t{ id: v1(), title: 'HTML&CSS', isDone: true },\r\n\t\t{ id: v1(), title: 'JS', isDone: true },\r\n\t\t{ id: v1(), title: 'ReactJS', isDone: false },\r\n\t\t{ id: v1(), title: 'Redux', isDone: false },\r\n\t\t{ id: v1(), title: 'nodeJS', isDone: false },\r\n\t]);\r\n\t//\r\n\tfunction tasksState() {\r\n\t\tif (filter === 'completed') {\r\n\t\t\treturn (tasks = tasks.filter((f) => f.isDone === true));\r\n\t\t}\r\n\t\tif (filter === 'active') {\r\n\t\t\treturn (tasks = tasks.filter((f) => f.isDone === false));\r\n\t\t} else {\r\n\t\t\treturn tasks;\r\n\t\t}\r\n\t}\r\n\t//\r\n\tfunction setButtonValue(el: ValueFilter) {\r\n\t\tsetFilter(el);\r\n\t}\r\n\t//\r\n\tfunction removeTask(id: string) {\r\n\t\tlet tasksChange = tasks.filter((f) => {\r\n\t\t\treturn f.id !== id;\r\n\t\t});\r\n\t\tsetTasks(tasksChange);\r\n\t}\r\n\t//\r\n\tfunction addTask(v: string) {\r\n\t\tlet newTask = { id: v1(), title: v, isDone: false };\r\n\t\tlet newTasks = [newTask, ...tasks];\r\n\t\tsetTasks(newTasks);\r\n\t}\r\n\t//\r\n\treturn (\r\n\t\t<div className='App'>\r\n\t\t\t<Todolist\r\n\t\t\t\ttitle='What to learn'\r\n\t\t\t\ttasks={tasksState()}\r\n\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\tsetButtonValue={setButtonValue}\r\n\t\t\t\taddTask={addTask}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}